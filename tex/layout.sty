% coding:utf-8

%----------------------------------------
%FOSAMATH, a LaTeX-Code for a mathematical summary for basic analysis
%Copyright (C) 2013, Daniel Winz, Ervin Mazlagic, Adrian Imboden, Philipp Langer

%This program is free software; you can redistribute it and/or
%modify it under the terms of the GNU General Public License
%as published by the Free Software Foundation; either version 2
%of the License, or (at your option) any later version.

%This program is distributed in the hope that it will be useful,
%but WITHOUT ANY WARRANTY; without even the implied warranty of
%MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%GNU General Public License for more details.
%----------------------------------------

% coding:utf-8
\usepackage[utf8]{inputenc} % f√ºr input utf8
\usepackage[T1]{fontenc} %Schriftcodierung mit UTF-8
\usepackage{textcomp} %Erweiterung von fontenc
\usepackage{lmodern} %Erweiterung des Zeichensatzes

\usepackage{graphics}
\usepackage{graphicx}
\usepackage[table]{xcolor}
\usepackage{svg}
\usepackage[ngerman]{babel}
\usepackage{amsmath}
%\usepackage[all]{xy}
%\usepackage[xindy]{glossaries}
\usepackage{makeidx}
\usepackage{pdfpages}
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{amssymb}
\usepackage{ifthen}
\usepackage{uhrzeit}
\usepackage{spreadtab}
\usepackage{tikz}
\usepackage{longtable}
\usepackage{listings}

\usepackage{color}
\usepackage{colortbl}
\definecolor{gray}{gray}{0.749}
\definecolor{lgray}{gray}{0.85}
\definecolor{red}{rgb}{1, 0, 0}
\definecolor{green}{rgb}{0, 1, 0}
\definecolor{blue}{rgb}{0, 0, 1}
\definecolor{darkgreen}{rgb}{0, 0.5, 0}
\definecolor{stred}{rgb}{1, 0, 1}

% Special tables
    % light gray and white alternating
    \newenvironment{zebratabular}{\rowcolors{2}{lgray}{white}\tabular}{\endtabular}
    \newenvironment{zebralongtable}{\rowcolors{2}{lgray}{white}\longtable}{\endlongtable}

\usepackage{fancyhdr}                        % http://en.wikibooks.org/wiki/LaTeX/Page_Layout#Customising_with_fancyhdr

\pagestyle{fancy} %eigener Seitenstil
\fancyhf{} %alle Kopf- und Fusszeilenfelder bereinigen

\addtolength{\textheight}{3.5cm}
\addtolength{\voffset}{-1.5cm}
\addtolength{\textwidth}{1cm}
\addtolength{\evensidemargin}{-15mm}
\addtolength{\oddsidemargin}{5mm}

\addtolength{\textheight}{\topmargin-\evensidemargin-\hoffset+\voffset}
\setlength{\topmargin}{\evensidemargin+\hoffset-\voffset}

\addtolength{\headwidth}{1cm}

%\rhead{\setlength{\unitlength}{1mm}
%\begin{picture}(-2,7)
%    \includegraphics[width=35mm]{../fig/hslu_logo2.PNG}
%\end{picture}}

\fancyhead[L]{} %Kopfzeile links
\fancyhead[C]{} %zentrierte Kopfzeile
\fancyhead[RO]{\rightmark}
\fancyhead[LE]{\leftmark}
%\fancyhead[R]{\includegraphics[scale=0.25]{../fig/hslu_logo2.PNG}}
\renewcommand{\headrulewidth}{0.4pt} %obere Trennlinie
\fancyfoot[L]{}
\fancyfoot[C]{}
\fancyfoot[RO]{\thepage}
\fancyfoot[LE]{\thepage}
\renewcommand{\footrulewidth}{0.4pt} %untere Trennlinie

\lstdefinelanguage{st}
{
    %alsodigit{\%},
    % list of keywords
    % POUs
    classoffset=0,
    morekeywords={
        PROGRAM,
        END_PROGRAM,
        FUNCTION_BLOCK,
        END_FUNCTION_BLOCK,
        FUNCTION,
        END_FUNCTION,
    }, keywordstyle=\color{blue},
    % Variables
    classoffset=1,
    morekeywords={
        VAR,
        CONSTANT,
        PERSISTENT,
        READ_ONLY,
        READ_WRITE,
        RETAIN,
        VAR_INPUT,
        VAR_OUTPUT,
        VAR_GLOBAL,
        VAR_ACCESS,
        VAR_CONFIG,
        VAR_EXTERNAL,
        VAR_IN_OUT,
        END_VAR,
        AT,
    }, keywordstyle=\color{blue},
    % I/O Variables
    classoffset=2,
    morekeywords={
       \%I*,
       \%Q*,
    }, keywordstyle=\color{stred},
    % Branches
    classoffset=3,
    morekeywords={
        IF,
        THEN,
        ELSE,
        ELSIF,
        END_IF,
        CASE,
        OF,
        END_CASE,
    }, keywordstyle=\color{blue},
    % Loops
    classoffset=4,
    morekeywords={
        WHILE,
        DO,
        END_WHILE,
        REPEAT,
        UNTIL,
        END_REPEAT,
        FOR,
        TO,
        BY,
        END_FOR,
        EXIT,
        RETURN,
    }, keywordstyle=\color{blue},
    % Types
    classoffset=5,
    morekeywords={
        BOOL,
        BYTE,
        WORD,
        DWORD,
        LWORD,
        SINT,
        INT,
        DINT,
        LINT,
        USINT,
        UINT,
        UDINT,
        ULINT,
        REAL,
        LREAL,
        TIME,
        DATE,
        TIME_OF_DAY,
        TOD,
        DATE_AND_TIME,
        DT,
        STRING,
        ARRAY,
        TYPE,
        END_TYPE,
        STRUCT,
        END_STRUCT,
    }, keywordstyle=\color{blue},
    % Constants for Booleans
    classoffset=6,
    morekeywords={
        TRUE,
        FALSE,
    }, keywordstyle=\color{stred},
    % Conversions
    classoffset=7,
    morekeywords={
      % BOOL to ...
        BOOL_TO_BYTE,
        BOOL_TO_DATE,
        BOOL_TO_DINT,
        BOOL_TO_DT,
        BOOL_TO_DWORD,
        BOOL_TO_INT,
        BOOL_TO_LREAL,
        BOOL_TO_REAL,
        BOOL_TO_SINT,
        BOOL_TO_STRING,
        BOOL_TO_TIME,
        BOOL_TO_TOD,
        BOOL_TO_UDINT,
        BOOL_TO_UINT,
        BOOL_TO_USINT,
        BOOL_TO_WORD,
      % BYTE to ...
        BYTE_TO_BOOL,
        BYTE_TO_DATE,
        BYTE_TO_DINT,
        BYTE_TO_DT,
        BYTE_TO_DWORD,
        BYTE_TO_INT,
        BYTE_TO_LREAL,
        BYTE_TO_REAL,
        BYTE_TO_SINT,
        BYTE_TO_STRING,
        BYTE_TO_TIME,
        BYTE_TO_TOD,
        BYTE_TO_UDINT,
        BYTE_TO_UINT,
        BYTE_TO_USINT,
        BYTE_TO_WORD,
      % DATE to ...
        DATE_TO_BOOL,
        DATE_TO_BYTE,
        DATE_TO_DINT,
        DATE_TO_DT,
        DATE_TO_DWORD,
        DATE_TO_INT,
        DATE_TO_LREAL,
        DATE_TO_REAL,
        DATE_TO_SINT,
        DATE_TO_STRING,
        DATE_TO_TIME,
        DATE_TO_TOD,
        DATE_TO_UDINT,
        DATE_TO_UINT,
        DATE_TO_USINT,
        DATE_TO_WORD,
      % DINT to ...
        DINT_TO_BOOL,
        DINT_TO_BYTE,
        DINT_TO_DATE,
        DINT_TO_DT,
        DINT_TO_DWORD,
        DINT_TO_INT,
        DINT_TO_LREAL,
        DINT_TO_REAL,
        DINT_TO_SINT,
        DINT_TO_STRING,
        DINT_TO_TIME,
        DINT_TO_TOD,
        DINT_TO_UDINT,
        DINT_TO_UINT,
        DINT_TO_USINT,
        DINT_TO_WORD,
      % DT to ...
        DT_TO_BOOL,
        DT_TO_BYTE,
        DT_TO_DATE,
        DT_TO_DINT,
        DT_TO_DWORD,
        DT_TO_INT,
        DT_TO_LREAL,
        DT_TO_REAL,
        DT_TO_SINT,
        DT_TO_STRING,
        DT_TO_TIME,
        DT_TO_TOD,
        DT_TO_UDINT,
        DT_TO_UINT,
        DT_TO_USINT,
        DT_TO_WORD,
      % DWORD to ...
        DWORD_TO_BOOL,
        DWORD_TO_BYTE,
        DWORD_TO_DATE,
        DWORD_TO_DINT,
        DWORD_TO_DT,
        DWORD_TO_INT,
        DWORD_TO_LREAL,
        DWORD_TO_REAL,
        DWORD_TO_SINT,
        DWORD_TO_STRING,
        DWORD_TO_TIME,
        DWORD_TO_TOD,
        DWORD_TO_UDINT,
        DWORD_TO_UINT,
        DWORD_TO_USINT,
        DWORD_TO_WORD,
      % INT to ...
        INT_TO_BOOL,
        INT_TO_BYTE,
        INT_TO_DATE,
        INT_TO_DINT,
        INT_TO_DT,
        INT_TO_DWORD,
        INT_TO_LREAL,
        INT_TO_REAL,
        INT_TO_SINT,
        INT_TO_STRING,
        INT_TO_TIME,
        INT_TO_TOD,
        INT_TO_UDINT,
        INT_TO_UINT,
        INT_TO_USINT,
        INT_TO_WORD,
      % LREAL to ...
        LREAL_TO_BOOL,
        LREAL_TO_BYTE,
        LREAL_TO_DATE,
        LREAL_TO_DINT,
        LREAL_TO_DT,
        LREAL_TO_DWORD,
        LREAL_TO_INT,
        LREAL_TO_REAL,
        LREAL_TO_SINT,
        LREAL_TO_STRING,
        LREAL_TO_TIME,
        LREAL_TO_TOD,
        LREAL_TO_UDINT,
        LREAL_TO_UINT,
        LREAL_TO_USINT,
        LREAL_TO_WORD,
      % REAL to ...
        REAL_TO_BOOL,
        REAL_TO_BYTE,
        REAL_TO_DATE,
        REAL_TO_DINT,
        REAL_TO_DT,
        REAL_TO_DWORD,
        REAL_TO_INT,
        REAL_TO_LREAL,
        REAL_TO_SINT,
        REAL_TO_STRING,
        REAL_TO_TIME,
        REAL_TO_TOD,
        REAL_TO_UDINT,
        REAL_TO_UINT,
        REAL_TO_USINT,
        REAL_TO_WORD,
      % SINT to ...
        SINT_TO_BOOL,
        SINT_TO_BYTE,
        SINT_TO_DATE,
        SINT_TO_DINT,
        SINT_TO_DT,
        SINT_TO_DWORD,
        SINT_TO_INT,
        SINT_TO_LREAL,
        SINT_TO_REAL,
        SINT_TO_STRING,
        SINT_TO_TIME,
        SINT_TO_TOD,
        SINT_TO_UDINT,
        SINT_TO_UINT,
        SINT_TO_USINT,
        SINT_TO_WORD,
      % STRING to ...
        STRING_TO_BOOL,
        STRING_TO_BYTE,
        STRING_TO_DATE,
        STRING_TO_DINT,
        STRING_TO_DT,
        STRING_TO_DWORD,
        STRING_TO_INT,
        STRING_TO_LREAL,
        STRING_TO_REAL,
        STRING_TO_SINT,
        STRING_TO_TIME,
        STRING_TO_TOD,
        STRING_TO_UDINT,
        STRING_TO_UINT,
        STRING_TO_USINT,
        STRING_TO_WORD,
      % TIME to ...
        TIME_TO_BOOL,
        TIME_TO_BYTE,
        TIME_TO_DATE,
        TIME_TO_DINT,
        TIME_TO_DT,
        TIME_TO_DWORD,
        TIME_TO_INT,
        TIME_TO_LREAL,
        TIME_TO_REAL,
        TIME_TO_SINT,
        TIME_TO_STRING,
        TIME_TO_TOD,
        TIME_TO_UDINT,
        TIME_TO_UINT,
        TIME_TO_USINT,
        TIME_TO_WORD,
      % TOD to ...
        TOD_TO_BOOL,
        TOD_TO_BYTE,
        TOD_TO_DATE,
        TOD_TO_DINT,
        TOD_TO_DT,
        TOD_TO_DWORD,
        TOD_TO_INT,
        TOD_TO_LREAL,
        TOD_TO_REAL,
        TOD_TO_SINT,
        TOD_TO_STRING,
        TOD_TO_TIME,
        TOD_TO_UDINT,
        TOD_TO_UINT,
        TOD_TO_USINT,
        TOD_TO_WORD,
      % UDINT to ...
        UDINT_TO_BOOL,
        UDINT_TO_BYTE,
        UDINT_TO_DATE,
        UDINT_TO_DINT,
        UDINT_TO_DT,
        UDINT_TO_DWORD,
        UDINT_TO_INT,
        UDINT_TO_LREAL,
        UDINT_TO_REAL,
        UDINT_TO_SINT,
        UDINT_TO_STRING,
        UDINT_TO_TIME,
        UDINT_TO_TOD,
        UDINT_TO_UINT,
        UDINT_TO_USINT,
        UDINT_TO_WORD,
      % UINT to ...
        UINT_TO_BOOL,
        UINT_TO_BYTE,
        UINT_TO_DATE,
        UINT_TO_DINT,
        UINT_TO_DT,
        UINT_TO_DWORD,
        UINT_TO_INT,
        UINT_TO_LREAL,
        UINT_TO_REAL,
        UINT_TO_SINT,
        UINT_TO_STRING,
        UINT_TO_TIME,
        UINT_TO_TOD,
        UINT_TO_UDINT,
        UINT_TO_USINT,
        UINT_TO_WORD,
      % USINT to ...
        USINT_TO_BOOL,
        USINT_TO_BYTE,
        USINT_TO_DATE,
        USINT_TO_DINT,
        USINT_TO_DT,
        USINT_TO_DWORD,
        USINT_TO_INT,
        USINT_TO_LREAL,
        USINT_TO_REAL,
        USINT_TO_SINT,
        USINT_TO_STRING,
        USINT_TO_TIME,
        USINT_TO_TOD,
        USINT_TO_UDINT,
        USINT_TO_UINT,
        USINT_TO_WORD,
      % WORD to ...
        WORD_TO_BOOL,
        WORD_TO_BYTE,
        WORD_TO_DATE,
        WORD_TO_DINT,
        WORD_TO_DT,
        WORD_TO_DWORD,
        WORD_TO_INT,
        WORD_TO_LREAL,
        WORD_TO_REAL,
        WORD_TO_SINT,
        WORD_TO_STRING,
        WORD_TO_TIME,
        WORD_TO_TOD,
        WORD_TO_UDINT,
        WORD_TO_UINT,
        WORD_TO_USINT,
    }, keywordstyle=\color{blue},
    % Operators
    classoffset=8,
    morekeywords={
        ABS,
        ACOS,
        ADR,
        ADRINST,
        AND,
        ASIN,
        ATAN,
        COS,
        EXP,
        EXPT,
        INDEXOF,
        LIMIT,
        LN,
        LOG,
        MAX,
        MIN,
        MOVE,
        MUX,
        NOT,
        OR,
        ROL,
        ROR,
        SEL,
        SHL,
        SHR,
        SIN,
        SIZEOF,
        SQRT,
        TAN,
        TRUNC,
        XOR,
    }, keywordstyle=\color{stred},
    % Special letters for I/O variables
    alsoletter={\%, \*},
    % Reset classoffset
    classoffset=0,
    sensitive=true,
    % Comments
    morecomment=[s]{(*}{*)},
    % Strings
    morestring=[b]'
}

\lstset{language=st}
\lstloadlanguages{st}
\lstset{basicstyle=\ttfamily,
    %numbers=left,
    %numberstyle=\tiny, 
    %numbersep=5pt,
    breaklines=true,
    %texcsstyle=\color{red},
    backgroundcolor=\color{gray!10},
    commentstyle=\color{darkgreen},
    keywordstyle=\color{blue}\bfseries,
    stringstyle=\color{green}\bfseries,
    frame=single,
    tabsize=4,
    rulecolor=\color{black!30},
    title=\lstname,
    escapeinside={\%*}{*)},
    breaklines=true,
    breakatwhitespace=true,
    framextopmargin=2pt,
    framexbottommargin=2pt,
    inputencoding=utf8,
    extendedchars=true,
    literate={√ñ}{{\"O}}1
             {√Ñ}{{\"A}}1
             {√ú}{{\"U}}1
             {√º}{{\"u}}1
             {√§}{{\"a}}1
             {√∂}{{\"o}}1 }


\newcommand\lstsettingst{
    \lstset{language=st}
    \lstloadlanguages{st}
    \lstset{basicstyle=\ttfamily,
        %numbers=left,
        %numberstyle=\tiny, 
        %numbersep=5pt,
        breaklines=true,
        %texcsstyle=\color{red},
        backgroundcolor=\color{gray!10},
        commentstyle=\color{darkgreen},
        keywordstyle=\color{blue}\bfseries,
        stringstyle=\color{green}\bfseries,
        frame=single,
        tabsize=4,
        rulecolor=\color{black!30},
        title=\lstname,
        escapeinside={\%*}{*)},
        breaklines=true,
        breakatwhitespace=true,
        framextopmargin=2pt,
        framexbottommargin=2pt,
        inputencoding=utf8,
        extendedchars=true,
        literate={√ñ}{{\"O}}1
                 {√Ñ}{{\"A}}1
                 {√ú}{{\"U}}1
                 {√º}{{\"u}}1
                 {√§}{{\"a}}1
                 {√∂}{{\"o}}1 }
}
